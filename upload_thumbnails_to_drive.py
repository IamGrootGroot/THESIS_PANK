#!/usr/bin/env python3
"""
Upload TRIDENT Thumbnails to Google Drive Script

This script collects visualization outputs from TRIDENT processing
and uploads them to a Google Drive folder for quality control.

You don't really need to use it if you're using this pipeline locally.
"""

import os
import argparse
import logging
from pathlib import Path
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# Google Drive API scope
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def authenticate_google_drive(credentials_file):
    """
    Authenticate with Google Drive API using credentials file.
    """
    creds = None
    token_file = 'token.json'
    
    # Load existing token
    if os.path.exists(token_file):
        creds = Credentials.from_authorized_user_file(token_file, SCOPES)
    
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(credentials_file, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_file, 'w') as token:
            token.write(creds.to_json())
    
    return build('drive', 'v3', credentials=creds)

def create_drive_folder(service, folder_name, parent_folder_id=None):
    """
    Create a folder in Google Drive and return its ID.
    """
    file_metadata = {
        'name': folder_name,
        'mimeType': 'application/vnd.google-apps.folder'
    }
    
    if parent_folder_id:
        file_metadata['parents'] = [parent_folder_id]
    
    folder = service.files().create(body=file_metadata, fields='id').execute()
    logger.info(f"Created folder '{folder_name}' with ID: {folder.get('id')}")
    return folder.get('id')

def upload_file_to_drive(service, file_path, folder_id=None):
    """
    Upload a file to Google Drive.
    """
    file_name = Path(file_path).name
    file_metadata = {'name': file_name}
    
    if folder_id:
        file_metadata['parents'] = [folder_id]
    
    media = MediaFileUpload(file_path, resumable=True)
    
    try:
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        logger.info(f"Uploaded '{file_name}' with ID: {file.get('id')}")
        return file.get('id')
    except Exception as e:
        logger.error(f"Failed to upload '{file_name}': {e}")
        return None

def find_visualization_files(trident_output_dir):
    """
    Find all visualization files generated by TRIDENT.
    """
    trident_path = Path(trident_output_dir)
    visualization_files = []
    
    # Look for thumbnails in the thumbnails directory (TRIDENT structure)
    thumbnails_dir = trident_path / "thumbnails"
    if thumbnails_dir.exists():
        for img_file in thumbnails_dir.glob("*.jpg"):
            visualization_files.append(img_file)
        for img_file in thumbnails_dir.glob("*.jpeg"):
            visualization_files.append(img_file)
        for img_file in thumbnails_dir.glob("*.png"):
            visualization_files.append(img_file)
    
    # Also look for visualization directories and files (fallback)
    for item in trident_path.rglob("*"):
        if item.is_file() and item.suffix.lower() in ['.jpg', '.jpeg', '.png']:
            # Check if it's in a visualization directory or has visualization in name
            if 'visualization' in str(item) or 'thumbnail' in item.name.lower():
                if item not in visualization_files:
                    visualization_files.append(item)
    
    return visualization_files

def main():
    parser = argparse.ArgumentParser(description="Upload TRIDENT visualization outputs to Google Drive.")
    parser.add_argument("--trident_output_dir", type=str, required=True,
                        help="Directory containing TRIDENT output with visualization files.")
    parser.add_argument("--credentials_file", type=str, required=True,
                        help="Path to Google Drive API credentials JSON file.")
    parser.add_argument("--folder_name", type=str, default="TRIDENT_QC_Thumbnails",
                        help="Name of the Google Drive folder to create/use.")
    parser.add_argument("--parent_folder_id", type=str, default=None,
                        help="ID of parent folder in Google Drive (optional).")

    args = parser.parse_args()

    trident_output_dir = Path(args.trident_output_dir)
    credentials_file = Path(args.credentials_file)

    if not trident_output_dir.exists():
        logger.error(f"TRIDENT output directory not found: {trident_output_dir}")
        return

    if not credentials_file.exists():
        logger.error(f"Credentials file not found: {credentials_file}")
        return

    # Authenticate with Google Drive
    logger.info("Authenticating with Google Drive...")
    try:
        service = authenticate_google_drive(str(credentials_file))
        logger.info("Authentication successful!")
    except Exception as e:
        logger.error(f"Authentication failed: {e}")
        return

    # Create folder in Google Drive
    logger.info(f"Creating folder '{args.folder_name}' in Google Drive...")
    try:
        folder_id = create_drive_folder(service, args.folder_name, args.parent_folder_id)
    except Exception as e:
        logger.error(f"Failed to create folder: {e}")
        return

    # Find visualization files
    logger.info("Searching for visualization files...")
    visualization_files = find_visualization_files(trident_output_dir)
    
    if not visualization_files:
        logger.warning("No visualization files found in TRIDENT output directory")
        return

    logger.info(f"Found {len(visualization_files)} visualization files:")
    for viz_file in visualization_files:
        logger.info(f"  - {viz_file}")

    # Upload files to Google Drive
    logger.info("Uploading files to Google Drive...")
    uploaded_count = 0
    failed_count = 0

    for viz_file in visualization_files:
        if upload_file_to_drive(service, str(viz_file), folder_id):
            uploaded_count += 1
        else:
            failed_count += 1

    logger.info(f"Upload complete! {uploaded_count} files uploaded, {failed_count} failed")
    logger.info(f"Google Drive folder ID: {folder_id}")

if __name__ == "__main__":
    main() 