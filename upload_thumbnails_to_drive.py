#!/usr/bin/env python3
"""
Upload TRIDENT Thumbnails to Google Drive Script

This script collects visualization outputs from TRIDENT processing
and uploads them to a Google Drive folder for quality control.
It uses a pre-generated token file for authentication.
"""

import os
import argparse
import logging
from pathlib import Path
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Google Drive API scope
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def authenticate_google_drive(credentials_file, token_file):
    """
    Authenticate with Google Drive API using credentials and token files.
    """
    creds = None
    
    # Load existing token
    if os.path.exists(token_file):
        try:
            creds = Credentials.from_authorized_user_file(token_file, SCOPES)
        except Exception as e:
            logger.error(f"Error loading token file: {e}")
            return None

    # If token is invalid or expired, try to refresh it
    if creds and not creds.valid:
        if creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
                # Save the refreshed credentials
                with open(token_file, 'w') as token:
                    token.write(creds.to_json())
            except Exception as e:
                logger.error(f"Error refreshing token: {e}")
                return None
        else:
            logger.error("Token is invalid and cannot be refreshed. Please generate a new token using generate_drive_token.py")
            return None

    if not creds:
        logger.error(f"No valid credentials found. Please run generate_drive_token.py first.")
        return None

    try:
        service = build('drive', 'v3', credentials=creds)
        return service
    except Exception as e:
        logger.error(f"Error building Drive service: {e}")
        return None

def create_drive_folder(service, folder_name):
    """
    Create a folder in Google Drive and return its ID.
    """
    file_metadata = {
        'name': folder_name,
        'mimeType': 'application/vnd.google-apps.folder'
    }
    
    try:
        folder = service.files().create(body=file_metadata, fields='id').execute()
        folder_id = folder.get('id')
        logger.info(f"Created folder '{folder_name}' with ID: {folder_id}")
        return folder_id
    except Exception as e:
        logger.error(f"Error creating folder: {e}")
        return None

def find_visualization_files(trident_output_dir):
    """
    Find all visualization files generated by TRIDENT.
    """
    trident_path = Path(trident_output_dir)
    visualization_files = []
    
    # Look for thumbnails in the thumbnails directory
    thumbnails_dir = trident_path / "thumbnails"
    if thumbnails_dir.exists():
        for ext in ['.jpg', '.jpeg', '.png']:
            visualization_files.extend(thumbnails_dir.glob(f"*{ext}"))
    
    # Also look for visualization directories and files
    for item in trident_path.rglob("*"):
        if item.is_file() and item.suffix.lower() in ['.jpg', '.jpeg', '.png']:
            if 'visualization' in str(item) or 'thumbnail' in item.name.lower():
                if item not in visualization_files:
                    visualization_files.append(item)
    
    return visualization_files

def upload_file_to_drive(service, file_path, folder_id):
    """
    Upload a file to Google Drive.
    """
    file_name = Path(file_path).name
    file_metadata = {
        'name': file_name,
        'parents': [folder_id]
    }
    
    try:
        media = MediaFileUpload(
            str(file_path),
            mimetype='image/jpeg' if file_path.suffix.lower() in ['.jpg', '.jpeg'] else 'image/png',
            resumable=True
        )
        
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        logger.info(f"Uploaded '{file_name}' with ID: {file.get('id')}")
        return file.get('id')
    except Exception as e:
        logger.error(f"Failed to upload '{file_name}': {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="Upload TRIDENT visualization outputs to Google Drive.")
    parser.add_argument("--trident_output_dir", type=str, required=True,
                      help="Directory containing TRIDENT output with visualization files.")
    parser.add_argument("--credentials_file", type=str, required=True,
                      help="Path to Google Drive API credentials JSON file.")
    parser.add_argument("--token_file", type=str, default="token.json",
                      help="Path to the token file (default: token.json)")
    parser.add_argument("--folder_name", type=str, default="TRIDENT_QC_Thumbnails",
                      help="Name of the Google Drive folder to create/use.")

    args = parser.parse_args()

    trident_output_dir = Path(args.trident_output_dir)
    credentials_file = Path(args.credentials_file)
    token_file = Path(args.token_file)

    if not trident_output_dir.exists():
        logger.error(f"TRIDENT output directory not found: {trident_output_dir}")
        return

    if not credentials_file.exists():
        logger.error(f"Credentials file not found: {credentials_file}")
        return

    if not token_file.exists():
        logger.error(f"Token file not found: {token_file}. Please run generate_drive_token.py first.")
        return

    # Authenticate with Google Drive
    logger.info("Authenticating with Google Drive...")
    service = authenticate_google_drive(str(credentials_file), str(token_file))
    if not service:
        return

    # Create folder in Google Drive
    logger.info(f"Creating folder '{args.folder_name}' in Google Drive...")
    folder_id = create_drive_folder(service, args.folder_name)
    if not folder_id:
        return

    # Find visualization files
    logger.info("Searching for visualization files...")
    visualization_files = find_visualization_files(trident_output_dir)
    
    if not visualization_files:
        logger.warning("No visualization files found in TRIDENT output directory")
        return

    logger.info(f"Found {len(visualization_files)} visualization files:")
    for viz_file in visualization_files:
        logger.info(f"  - {viz_file}")

    # Upload files to Google Drive
    logger.info("Uploading files to Google Drive...")
    uploaded_count = 0
    failed_count = 0

    for viz_file in visualization_files:
        if upload_file_to_drive(service, viz_file, folder_id):
            uploaded_count += 1
        else:
            failed_count += 1

    logger.info(f"Upload complete! {uploaded_count} files uploaded, {failed_count} failed")
    logger.info(f"Google Drive folder ID: {folder_id}")

if __name__ == "__main__":
    main() 