import cudf
import cuml
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px  # Interactive 3D plotting
import plotly.io as pio
from mpl_toolkits.mplot3d import Axes3D  # Required for 3D plotting
from cuml.manifold import UMAP
from cuml.cluster import KMeans
import os  # To check file existence

def umap_3d_visualization(input_file, output_image, interactive_html="interactive_umap.html"):
    """
    Perform 3D UMAP dimensionality reduction, apply K-Means clustering,
    and visualize the output with a 3D scatter plot (both static and interactive).
    """

    # Convert Windows paths to WSL paths if needed
    if input_file.startswith("C:\\"):
        input_file = input_file.replace("\\", "/").replace("C:", "/mnt/c")
    if output_image.startswith("C:\\"):
        output_image = output_image.replace("\\", "/").replace("C:", "/mnt/c")

    # Check if the file exists
    if not os.path.exists(input_file):
        raise FileNotFoundError(f"Error: The file '{input_file}' does not exist. Check the path and try again.")

    # 1. Load embeddings from CSV file using GPU-accelerated cuDF
    print(f"Loading embeddings from {input_file} ...")
    gdf = cudf.read_csv(input_file)

    # Print column names to debug
    print("Columns in CSV:", gdf.columns)

    # 2. Drop all non-numeric columns
    non_numeric_columns = ['filename', 'element']  # Adjust if needed
    for col in non_numeric_columns:
        if col in gdf.columns:
            gdf = gdf.drop([col], axis=1)

    # Convert data to float32 (important for RAPIDS compatibility)
    gdf = gdf.astype('float32')

    # 3. Convert to NumPy array
    embeddings = gdf.to_pandas().values  # Convert cuDF DataFrame to NumPy array

    # 4. Apply UMAP for 3D dimensionality reduction
    print("Computing 3D UMAP projection...")
    umap_3d = UMAP(
        n_components=3,  # Reduce to 3D
        n_neighbors=15,
        min_dist=0.1,
        random_state=42
    )
    embeddings_3d = umap_3d.fit_transform(embeddings)

    # 5. Apply K-Means Clustering with 30 clusters
    print("Performing K-Means with 30 clusters...")
    kmeans = KMeans(n_clusters=30, random_state=42)
    kmeans.fit(embeddings_3d)
    cluster_labels = kmeans.predict(embeddings_3d)

    # 6. Convert results to cuDF DataFrame
    df_3d = cudf.DataFrame({
        'x': embeddings_3d[:, 0],
        'y': embeddings_3d[:, 1],
        'z': embeddings_3d[:, 2],
        'cluster': cluster_labels
    })

    # 7. Subsample if dataset is too large (adjustable for GPU memory)
    sample_size = 100000
    if len(df_3d) > sample_size:
        df_3d = df_3d.sample(n=sample_size)

    # 8. Create a 3D interactive scatter plot using Plotly
    print("Generating interactive 3D scatter plot...")
    fig = px.scatter_3d(
        df_3d.to_pandas(),  # Convert cuDF DataFrame to Pandas
        x='x', y='y', z='z', 
        color='cluster', 
        title="Interactive 3D UMAP Projection (30 Clusters)",
        labels={'x': "UMAP 1", 'y': "UMAP 2", 'z': "UMAP 3"},
        opacity=0.7
    )

    # Save as an interactive HTML file
    pio.write_html(fig, interactive_html)
    print(f"Interactive 3D visualization saved to {interactive_html}")

    # 9. Create a static Matplotlib 3D scatter plot (for saving as image)
    print("Generating static 3D scatter plot for saving...")
    plt.figure(figsize=(16, 12))
    ax = plt.axes(projection='3d')

    scatter = ax.scatter3D(
        df_3d['x'].to_numpy(),
        df_3d['y'].to_numpy(),
        df_3d['z'].to_numpy(),
        c=df_3d['cluster'].to_numpy(),  # Color by cluster
        cmap='tab20',
        s=20,
        alpha=0.7,
        depthshade=True
    )

    # 10. Adjust plot settings
    ax.set_title("3D UMAP Projection (30 Clusters)", fontsize=14)
    ax.set_xlabel("UMAP 1", labelpad=10)
    ax.set_ylabel("UMAP 2", labelpad=10)
    ax.set_zlabel("UMAP 3", labelpad=10)

    # Add colorbar
    cbar = plt.colorbar(scatter, ax=ax, pad=0.1)
    cbar.set_label('Cluster ID')

    # Adjust viewing angle
    ax.view_init(elev=20, azim=45)

    # 11. Save the figure
    plt.savefig(output_image, dpi=350, bbox_inches='tight')
    print(f"Static 3D visualization saved to {output_image}")

    # Show the static Matplotlib plot
    plt.show()


if __name__ == "__main__":
    umap_3d_visualization(
        input_file="C:\\Users\\LA0122630\\Documents\\Kassab_UniClusteringPancreas\\03_embeddings\\output_embeddings_new1.csv",  # Windows path
        output_image="C:\\Users\\LA0122630\\Documents\\Kassab_UniClusteringPancreas\\05_interactive_umaps\\umap_3d_new1.png",  # Windows path
        interactive_html="C:\\Users\\LA0122630\\Documents\\Kassab_UniClusteringPancreas\\05_interactive_umaps\\umap_3d_interactive_new1.html"  # Interactive file
    )
