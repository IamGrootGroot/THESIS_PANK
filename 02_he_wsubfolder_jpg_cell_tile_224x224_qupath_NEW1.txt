// Patch extraction script for QuPath 0.5.1
// Extracts 224x224 px patches centered around detected cell centroids
// Saves patches in subfolders named after each ROI in the specified output directory

import qupath.lib.images.servers.ImageServer
import qupath.lib.images.writers.ImageWriterTools
import qupath.lib.regions.RegionRequest
import qupath.lib.common.GeneralTools
import qupath.lib.objects.PathAnnotationObject

// Define output base directory
def outputPath = "C:/Users/LA0122630/Documents/Kassab_UniClusteringPancreas/02_ROI_patches_new1"

// Create output directory if it doesn't exist
def outputDir = new File(outputPath)
if (!outputDir.exists()) {
    outputDir.mkdirs()
}

// Get current image server
def server = getCurrentServer()
def imageName = GeneralTools.stripExtension(server.getMetadata().getName())

// Get image dimensions
def imageWidth = server.getWidth()
def imageHeight = server.getHeight()

// Retrieve base magnification and calculate downsample factor
def baseMagnification = server.getMetadata().getMagnification()
if (baseMagnification == null || Double.isNaN(baseMagnification) || baseMagnification <= 0) {
    print "Base magnification unavailable or invalid. Using default = 40.0"
    baseMagnification = 40.0
}

def desiredMagnification = 40.0
def downsample = baseMagnification / desiredMagnification
if (Double.isNaN(downsample) || downsample <= 0) {
    print "Invalid downsample (${downsample}). Using 1.0 instead."
    downsample = 1.0
}

// Define patch size (224x224 pixels at 40x magnification)
def patchSize = (int)(224 * downsample)
def halfPatchSize = (int)(112 * downsample) // Half of 224

// Loop over each annotation (ROI)
def annotations = getAnnotationObjects()

for (annotation in annotations) {
    // Get annotation name (if available)
    def annotationName = annotation.getName()
    if (annotationName == null || annotationName.isEmpty()) {
        annotationName = "ROI_${annotations.indexOf(annotation) + 1}"
    }

    // Create subfolder for this annotation (ROI)
    def annotationOutputDir = new File(outputDir, annotationName)
    if (!annotationOutputDir.exists()) {
        annotationOutputDir.mkdirs()
    }

    // Get detections (cells) within the current annotation
    def detections = annotation.getChildObjects().findAll { it.isDetection() }
    def counter = 0

    // Iterate over each detected cell
    for (detection in detections) {
        // Get centroid coordinates
        def centroidX = detection.getROI().getCentroidX()
        def centroidY = detection.getROI().getCentroidY()

        // Convert to integers
        def centroidX_int = (int) centroidX
        def centroidY_int = (int) centroidY

        // Calculate top-left coordinates of the patch
        def x = centroidX_int - halfPatchSize
        def y = centroidY_int - halfPatchSize

        // Check if the patch is within image boundaries
        if (x >= 0 && y >= 0 && x + patchSize <= imageWidth && y + patchSize <= imageHeight) {
            // Create a region request for the patch
            def region = RegionRequest.createInstance(
                server.getPath(),
                downsample,
                x,
                y,
                patchSize,
                patchSize
            )

            // Define output file with naming format
            def outputFile = new File(
                annotationOutputDir,
                String.format("%s_%s_%d_%d_%06d.jpg", imageName, annotationName, centroidX_int, centroidY_int, counter)
            )

            // Save the image patch
            ImageWriterTools.writeImageRegion(
                server,
                region,
                outputFile.getAbsolutePath()
            )

            // Increment patch counter
            counter++
        } else {
            print "Patch at (${x}, ${y}) is out of bounds for annotation ${annotationName} and will be skipped."
        }
    }

    // Print total patches saved for this ROI
    print "Total patches saved for ${annotationName}: ${counter}"
}

// Print completion message
print "Patch extraction completed."
