#!/usr/bin/env python3
"""
Upload QuPath QC Thumbnails to Google Drive Script

This script collects QC thumbnail images from QuPath projects (with TRIDENT annotations)
and uploads them to a Google Drive folder for quality control review.
It uses a pre-generated token file for authentication.
"""

import os
import argparse
import logging
from pathlib import Path
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Google Drive API scope
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def authenticate_google_drive(credentials_file, token_file):
    """
    Authenticate with Google Drive API using credentials and token files.
    """
    creds = None
    
    # Load existing token
    if os.path.exists(token_file):
        try:
            creds = Credentials.from_authorized_user_file(token_file, SCOPES)
        except Exception as e:
            logger.error(f"Error loading token file: {e}")
            return None

    # If token is invalid or expired, try to refresh it
    if creds and not creds.valid:
        if creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
                # Save the refreshed credentials
                with open(token_file, 'w') as token:
                    token.write(creds.to_json())
            except Exception as e:
                logger.error(f"Error refreshing token: {e}")
                return None
        else:
            logger.error("Token is invalid and cannot be refreshed. Please generate a new token using generate_drive_token.py")
            return None

    if not creds:
        logger.error(f"No valid credentials found. Please run generate_drive_token.py first.")
        return None

    try:
        service = build('drive', 'v3', credentials=creds)
        return service
    except Exception as e:
        logger.error(f"Error building Drive service: {e}")
        return None

def create_drive_folder(service, folder_name):
    """
    Create a folder in Google Drive and return its ID.
    """
    file_metadata = {
        'name': folder_name,
        'mimeType': 'application/vnd.google-apps.folder'
    }
    
    try:
        folder = service.files().create(body=file_metadata, fields='id').execute()
        folder_id = folder.get('id')
        logger.info(f"Created folder '{folder_name}' with ID: {folder_id}")
        return folder_id
    except Exception as e:
        logger.error(f"Error creating folder: {e}")
        return None

def find_qc_thumbnail_files(qc_thumbnails_dir):
    """
    Find all QC thumbnail files generated by QuPath.
    """
    qc_path = Path(qc_thumbnails_dir)
    thumbnail_files = []
    
    if not qc_path.exists():
        logger.error(f"QC thumbnails directory not found: {qc_path}")
        return thumbnail_files
    
    # Look for QC thumbnail images (exported by QuPath script)
    for ext in ['.jpg', '.jpeg', '.png']:
        thumbnail_files.extend(qc_path.rglob(f"*qc_thumbnail{ext}"))
        thumbnail_files.extend(qc_path.rglob(f"*thumbnail{ext}"))
    
    # Also look for any image files in the directory
    if not thumbnail_files:
        for ext in ['.jpg', '.jpeg', '.png']:
            thumbnail_files.extend(qc_path.rglob(f"*{ext}"))
    
    return thumbnail_files

def upload_file_to_drive(service, file_path, folder_id):
    """
    Upload a file to Google Drive.
    """
    file_name = Path(file_path).name
    file_metadata = {
        'name': file_name,
        'parents': [folder_id]
    }
    
    try:
        media = MediaFileUpload(
            str(file_path),
            mimetype='image/jpeg' if file_path.suffix.lower() in ['.jpg', '.jpeg'] else 'image/png',
            resumable=True
        )
        
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        logger.info(f"Uploaded '{file_name}' with ID: {file.get('id')}")
        return file.get('id')
    except Exception as e:
        logger.error(f"Failed to upload '{file_name}': {e}")
        return None

def upload_text_file_to_drive(service, text_content, file_name, folder_id):
    """
    Upload text content as a file to Google Drive.
    """
    # Create a temporary file
    temp_file = Path(f"/tmp/{file_name}")
    try:
        with open(temp_file, 'w') as f:
            f.write(text_content)
        
        file_metadata = {
            'name': file_name,
            'parents': [folder_id]
        }
        
        media = MediaFileUpload(
            str(temp_file),
            mimetype='text/plain',
            resumable=True
        )
        
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        logger.info(f"Uploaded summary '{file_name}' with ID: {file.get('id')}")
        return file.get('id')
    except Exception as e:
        logger.error(f"Failed to upload summary '{file_name}': {e}")
        return None
    finally:
        # Clean up temporary file
        if temp_file.exists():
            temp_file.unlink()

def main():
    parser = argparse.ArgumentParser(description="Upload QuPath QC thumbnails to Google Drive.")
    parser.add_argument("--qc_thumbnails_dir", type=str, required=True,
                      help="Directory containing QC thumbnail files from QuPath.")
    parser.add_argument("--credentials_file", type=str, default="drive_credentials.json",
                      help="Path to Google Drive API credentials JSON file.")
    parser.add_argument("--token_file", type=str, default="token.json",
                      help="Path to the token file (default: token.json)")
    parser.add_argument("--folder_name", type=str, 
                      help="Name of the Google Drive folder to create. If not provided, will be auto-generated from directory name.")

    args = parser.parse_args()

    qc_thumbnails_dir = Path(args.qc_thumbnails_dir)
    credentials_file = Path(args.credentials_file)
    token_file = Path(args.token_file)

    if not qc_thumbnails_dir.exists():
        logger.error(f"QC thumbnails directory not found: {qc_thumbnails_dir}")
        return

    if not credentials_file.exists():
        logger.error(f"Credentials file not found: {credentials_file}")
        return

    if not token_file.exists():
        logger.error(f"Token file not found: {token_file}. Please run generate_drive_token.py first.")
        return

    # Auto-generate folder name if not provided
    if not args.folder_name:
        folder_name = f"QC_Thumbnails_{qc_thumbnails_dir.name}"
    else:
        folder_name = args.folder_name

    # Authenticate with Google Drive
    logger.info("Authenticating with Google Drive...")
    service = authenticate_google_drive(str(credentials_file), str(token_file))
    if not service:
        return

    # Create folder in Google Drive
    logger.info(f"Creating folder '{folder_name}' in Google Drive...")
    folder_id = create_drive_folder(service, folder_name)
    if not folder_id:
        return

    # Find QC thumbnail files
    logger.info("Searching for QC thumbnail files...")
    thumbnail_files = find_qc_thumbnail_files(qc_thumbnails_dir)
    
    if not thumbnail_files:
        logger.warning("No QC thumbnail files found in specified directory")
        return

    logger.info(f"Found {len(thumbnail_files)} QC thumbnail files:")
    for thumb_file in thumbnail_files:
        logger.info(f"  - {thumb_file}")

    # Upload files to Google Drive
    logger.info("Uploading QC thumbnails to Google Drive...")
    uploaded_count = 0
    failed_count = 0

    for thumb_file in thumbnail_files:
        if upload_file_to_drive(service, thumb_file, folder_id):
            uploaded_count += 1
        else:
            failed_count += 1

    # Upload summary file if it exists
    summary_file = qc_thumbnails_dir / "qc_summary.txt"
    if summary_file.exists():
        try:
            with open(summary_file, 'r') as f:
                summary_content = f.read()
            upload_text_file_to_drive(service, summary_content, "qc_summary.txt", folder_id)
        except Exception as e:
            logger.error(f"Failed to upload summary file: {e}")

    logger.info(f"Upload complete! {uploaded_count} files uploaded, {failed_count} failed")
    logger.info(f"Google Drive folder ID: {folder_id}")
    logger.info(f"Access your QC thumbnails at: https://drive.google.com/drive/folders/{folder_id}")

if __name__ == "__main__":
    main() 